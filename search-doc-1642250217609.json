[{"title":"Installation","type":0,"sectionRef":"#","url":"installation","content":"Installation You can install FastAPI-Azure-Auth like any other package on PyPI: pip install fastapi-azure-auth# ORpoetry add fastapi-azure-auth Copy info Only Python 3.9 and above is currently supported. If you can't install the package, check your Python version. Now that it's installed, jump on over to the single or multi-tenant application, based on what you need. Single-tenantMulti-tenant","keywords":""},{"title":"Accept specific tenants only","type":0,"sectionRef":"#","url":"multi-tenant/accept_specific_tenants_only","content":"","keywords":""},{"title":"More sophisticated callable","type":1,"pageTitle":"Accept specific tenants only","url":"multi-tenant/accept_specific_tenants_only#more-sophisticated-callable","content":"If you want to cache these results in memory, you can do so by creating a more sophisticated callable: class IssuerFetcher: def __init__(self) -> None: \"\"\" Example class for multi tenant apps, that caches issuers for an hour \"\"\" self.tid_to_iss: dict[str, str] = {} self._config_timestamp: Optional[datetime] = None async def __call__(self, tid: str) -> str: \"\"\" Check if memory cache needs to be updated or not, and then returns an issuer for a given tenant :raises InvalidAuth when it's not a valid tenant \"\"\" refresh_time = datetime.now() - timedelta(hours=1) if not self._config_timestamp or self._config_timestamp < refresh_time: self._config_timestamp = datetime.now() # logic to find your allowed tenants and it's issuers here # (This example cache in memory for 1 hour) self.tid_to_iss = { 'intility_tenant': 'intility_tenant', } try: return self.tid_to_iss[tid] except Exception as error: log.exception('`iss` not found for `tid` %s. Error %s', tid, error) raise InvalidAuth('You must be an Intility customer to access this resource') issuer_fetcher = IssuerFetcher() azure_scheme = MultiTenantAzureAuthorizationCodeBearer( ... validate_iss=True, valid_tenants_callable=issuer_fetcher) Copy "},{"title":"Azure configuration","type":0,"sectionRef":"#","url":"multi-tenant/azure_setup","content":"","keywords":""},{"title":"Backend API","type":1,"pageTitle":"Azure configuration","url":"multi-tenant/azure_setup#backend-api","content":""},{"title":"Step 1 - Create app registration","type":1,"pageTitle":"Azure configuration","url":"multi-tenant/azure_setup#step-1---create-app-registration","content":"Head over toAzure -> Azure Active Directory -> App registrations, and create a new registration. Select a fitting name for your project; Azure will present the name to the user during consent. Supported account types: Multitenant - If you want to create a multi-tenant application, you should head over to the multi-tenant documentationRedirect URI: Choose Web and http://localhost:8000 as a value  Press Register "},{"title":"Step 2 - Change token version to v2","type":1,"pageTitle":"Azure configuration","url":"multi-tenant/azure_setup#step-2---change-token-version-to-v2","content":"First we'll change the token version to version 2. In the left menu bar, click Manifest and find the line that says accessTokenAcceptedVersion. Change its value from null to 2.  Press Save (This change can take some time to happen, which is why we do this first.) "},{"title":"Step 3 - Note down your application IDs","type":1,"pageTitle":"Azure configuration","url":"multi-tenant/azure_setup#step-3---note-down-your-application-ids","content":"Go back to the Overview, found in the left menu.  Copy the Application (Client) ID, we'll need that for later. I like to use .env files to store variables like these: .env APP_CLIENT_ID= Copy "},{"title":"Step 4 - Add an application scope","type":1,"pageTitle":"Azure configuration","url":"multi-tenant/azure_setup#step-4---add-an-application-scope","content":"Go to Expose an API in the left menu bar under your app registration.Press + Add a scopePress Save and continue  Add a scope named user_impersonation that can be consented by Admins and users. You can use the following descriptions: Access API as userAllows the app to access the API as the user. Access API as youAllows the app to access the API as you. Copy "},{"title":"OpenAPI Documentation","type":1,"pageTitle":"Azure configuration","url":"multi-tenant/azure_setup#openapi-documentation","content":"Our OpenAPI documentation will use the Authorization Code Grant Flow, with Proof Key for Code Exchange flow. It's a flow that enables a user of a Single-Page Application to safely log in, consent to permissions and fetch an access_tokenin the JWT format. When the user clicks Try out on the APIs, the access_token is attached to the header as a Bearer token. This is the token the backend will validate. So, let's set it up! "},{"title":"Step 1 - Create app registration","type":1,"pageTitle":"Azure configuration","url":"multi-tenant/azure_setup#step-1---create-app-registration-1","content":"Just like in the previous chapter, we have to create an application registration for our OpenAPI. Head over toAzure -> Azure Active Directory -> App registrations, and create a new registration. Use the same name, but with - OpenAPI appended to it. Supported account types: MultitenantRedirect URI: Choose Single-Page Application (SPA) and http://localhost:8000/oauth2-redirect as a value  Press Register "},{"title":"Step 2 - Change token version to v2","type":1,"pageTitle":"Azure configuration","url":"multi-tenant/azure_setup#step-2---change-token-version-to-v2-1","content":"Like last time, we'll change the token version to version 2. In the left menu bar, click Manifest and find the line that says accessTokenAcceptedVersion. Change its value from null to 2.  Press Save "},{"title":"Step 3 - Note down your application IDs","type":1,"pageTitle":"Azure configuration","url":"multi-tenant/azure_setup#step-3---note-down-your-application-ids-1","content":"You should now be redirected to the Overview.  Copy the Application (Client) ID and save it as your OPENAPI_CLIENT_ID: .env APP_CLIENT_ID=OPENAPI_CLIENT_ID= Copy "},{"title":"Step 4 - Allow OpenAPI to talk to the backend","type":1,"pageTitle":"Azure configuration","url":"multi-tenant/azure_setup#step-4---allow-openapi-to-talk-to-the-backend","content":"To allow OpenAPI to talk to the backend API, you must add API permissions to the OpenAPI app registration. In the left menu, go to API Permissions and Add a permission.  Select the user_impersonation scope, and press Add a permission. Your view should now look something like this:  That's it! Next step is to configure the FastAPI application. "},{"title":"Locking down on roles","type":0,"sectionRef":"#","url":"multi-tenant/locking_down_on_roles","content":"Locking down on roles You can lock down on roles by creating your own wrapper dependency: dependencies.py from fastapi import Dependsfrom fastapi_azure_auth.auth import InvalidAuthfrom fastapi_azure_auth.user import User async def validate_is_admin_user(user: User = Depends(azure_scheme)) -> None: \"\"\" Validate that a user is in the `AdminUser` role in order to access the API. Raises a 401 authentication error if not. \"\"\" if 'AdminUser' not in user.roles: raise InvalidAuth('User is not an AdminUser') Copy and then use this dependency over azure_scheme.","keywords":""},{"title":"Multi-tenant settings","type":0,"sectionRef":"#","url":"settings/multi_tenant","content":"","keywords":""},{"title":"app_client_id: str","type":1,"pageTitle":"Multi-tenant settings","url":"settings/multi_tenant#app_client_id-str","content":"Default: None Your applications client ID. This will be the Web app in Azure AD  "},{"title":"scopes: Optional[dict[str, str]]","type":1,"pageTitle":"Multi-tenant settings","url":"settings/multi_tenant#scopes-optionaldictstr-str","content":"Default: None Scopes, these are the ones you've configured in Azure AD. Key is scope, value is a description. { f'api://{settings.APP_CLIENT_ID}/user_impersonation': 'user_impersonation',} Copy "},{"title":"validate_iss: bool","type":1,"pageTitle":"Multi-tenant settings","url":"settings/multi_tenant#validate_iss-bool","content":"Default: True Whether to validate the token issuer or not. This can be skipped to allow anyone to log in.  "},{"title":"iss_callable: Callable","type":1,"pageTitle":"Multi-tenant settings","url":"settings/multi_tenant#iss_callable-callable","content":"Default: None Async function that has to accept a tid and return a iss / raise an InvalidIssuer exception This is required when validate_iss is set to True. For examples, seeAccept specific tenants only  "},{"title":"openid_config_use_app_id: bool","type":1,"pageTitle":"Multi-tenant settings","url":"settings/multi_tenant#openid_config_use_app_id-bool","content":"Default: False Set this to True if you're using claims-mapping. If you're unsure, leave at False. Read more in theAzure docs.  "},{"title":"openapi_authorization_url: Optional[str]","type":1,"pageTitle":"Multi-tenant settings","url":"settings/multi_tenant#openapi_authorization_url-optionalstr","content":"Default: None Override OpenAPI authorization URL  "},{"title":"openapi_token_url: Optional[str]","type":1,"pageTitle":"Multi-tenant settings","url":"settings/multi_tenant#openapi_token_url-optionalstr","content":"Default: None Override OpenAPI token URL  "},{"title":"openapi_description: Optional[str]","type":1,"pageTitle":"Multi-tenant settings","url":"settings/multi_tenant#openapi_description-optionalstr","content":"Default: None Override OpenAPI description  "},{"title":"auto_error: bool","type":1,"pageTitle":"Multi-tenant settings","url":"settings/multi_tenant#auto_error-bool","content":"Default: True Set this to False if you are using multiple authentication libraries. This will return rather than throwing authentication exceptions. "},{"title":"Single-tenant settings","type":0,"sectionRef":"#","url":"settings/single_tenant","content":"","keywords":""},{"title":"app_client_id: str","type":1,"pageTitle":"Single-tenant settings","url":"settings/single_tenant#app_client_id-str","content":"Default: None Your applications client ID. This will be the Web app in Azure AD  "},{"title":"tenant_id: str","type":1,"pageTitle":"Single-tenant settings","url":"settings/single_tenant#tenant_id-str","content":"Default: None The Azure Tenant ID  "},{"title":"scopes: Optional[dict[str, str]]","type":1,"pageTitle":"Single-tenant settings","url":"settings/single_tenant#scopes-optionaldictstr-str","content":"Default: None Scopes, these are the ones you've configured in Azure AD. Key is scope, value is a description. { f'api://{settings.APP_CLIENT_ID}/user_impersonation': 'user_impersonation',} Copy  "},{"title":"token_version: Literal[1, 2]","type":1,"pageTitle":"Single-tenant settings","url":"settings/single_tenant#token_version-literal1-2","content":"Default: 2 Token version. Defaults to 2, which should always be used unless you have a good reason not to.  "},{"title":"openid_config_use_app_id: bool","type":1,"pageTitle":"Single-tenant settings","url":"settings/single_tenant#openid_config_use_app_id-bool","content":"Default: False Set this to True if you're using claims-mapping. If you're unsure, leave at False. Read more in theAzure docs.  "},{"title":"openapi_authorization_url: Optional[str]","type":1,"pageTitle":"Single-tenant settings","url":"settings/single_tenant#openapi_authorization_url-optionalstr","content":"Default: None Override OpenAPI authorization URL  "},{"title":"openapi_token_url: Optional[str]","type":1,"pageTitle":"Single-tenant settings","url":"settings/single_tenant#openapi_token_url-optionalstr","content":"Default: None Override OpenAPI token URL  "},{"title":"openapi_description: Optional[str]","type":1,"pageTitle":"Single-tenant settings","url":"settings/single_tenant#openapi_description-optionalstr","content":"Default: None Override OpenAPI description  "},{"title":"auto_error: bool","type":1,"pageTitle":"Single-tenant settings","url":"settings/single_tenant#auto_error-bool","content":"Default: True Set this to False if you are using multiple authentication libraries. This will return rather than throwing authentication exceptions. "},{"title":"Azure configuration","type":0,"sectionRef":"#","url":"single-tenant/azure_setup","content":"","keywords":""},{"title":"Backend API","type":1,"pageTitle":"Azure configuration","url":"single-tenant/azure_setup#backend-api","content":""},{"title":"Step 1 - Create app registration","type":1,"pageTitle":"Azure configuration","url":"single-tenant/azure_setup#step-1---create-app-registration","content":"Head over toAzure -> Azure Active Directory -> App registrations, and create a new registration. Select a fitting name for your project; Azure will present the name to the user during consent. Supported account types: Single tenant - If you want to create a multi-tenant application, you should head over to the multi-tenant documentationRedirect URI: Choose Web and http://localhost:8000 as a value Press Register  "},{"title":"Step 2 - Change token version to v2","type":1,"pageTitle":"Azure configuration","url":"single-tenant/azure_setup#step-2---change-token-version-to-v2","content":"First we'll change the token version to version 2. In the left menu bar, click Manifest and find the line that says accessTokenAcceptedVersion. Change its value from null to 2. Press Save (This change can take some time to happen, which is why we do this first.)  "},{"title":"Step 3 - Note down your application IDs","type":1,"pageTitle":"Azure configuration","url":"single-tenant/azure_setup#step-3---note-down-your-application-ids","content":"Go back to the Overview, found in the left menu. Copy the Application (Client) ID and Directory (tenant) ID, we'll need these for later. I like to use .env files to store variables like these: .env TENANT_ID=APP_CLIENT_ID=OPENAPI_CLIENT_ID= Copy  "},{"title":"Step 4 - Add an application scope","type":1,"pageTitle":"Azure configuration","url":"single-tenant/azure_setup#step-4---add-an-application-scope","content":"Go to Expose an API in the left menu bar under your app registration.Press + Add a scopeYou'll be prompted to set an Application ID URI, leave the suggested one and press Save and continue  Add a scope named user_impersonation that can be consented by Admins and users. You can use the following descriptions: Access API as userAllows the app to access the API as the user. Access API as youAllows the app to access the API as you. Copy  "},{"title":"OpenAPI Documentation","type":1,"pageTitle":"Azure configuration","url":"single-tenant/azure_setup#openapi-documentation","content":"Our OpenAPI documentation will use the Authorization Code Grant Flow, with Proof Key for Code Exchange flow. It's a flow that enables a user of a Single-Page Application to safely log in, consent to permissions and fetch an access_tokenin the JWT format. When the user clicks Try out on the APIs, the access_token is attached to the header as a Bearer token. This is the token the backend will validate. So, let's set it up! "},{"title":"Step 1 - Create app registration","type":1,"pageTitle":"Azure configuration","url":"single-tenant/azure_setup#step-1---create-app-registration-1","content":"Just like in the previous chapter, we have to create an application registration for our OpenAPI. Head over toAzure -> Azure Active Directory -> App registrations, and create a new registration. Use the same name, but with - OpenAPI appended to it. Supported account types: Single tenantRedirect URI: Choose Single-Page Application (SPA) and http://localhost:8000/oauth2-redirect as a value Press Register  "},{"title":"Step 2 - Change token version to v2","type":1,"pageTitle":"Azure configuration","url":"single-tenant/azure_setup#step-2---change-token-version-to-v2-1","content":"Like last time, we'll change the token version to version 2. In the left menu bar, click Manifest and find the line that says accessTokenAcceptedVersion. Change its value from null to 2. Press Save  "},{"title":"Step 3 - Note down your application IDs","type":1,"pageTitle":"Azure configuration","url":"single-tenant/azure_setup#step-3---note-down-your-application-ids-1","content":"Go back to the Overview, found in the left menu. Copy the Application (Client) ID and save it as your OPENAPI_CLIENT_ID: .env TENANT_ID=APP_CLIENT_ID=OPENAPI_CLIENT_ID= Copy  "},{"title":"Step 4 - Allow OpenAPI to talk to the backend","type":1,"pageTitle":"Azure configuration","url":"single-tenant/azure_setup#step-4---allow-openapi-to-talk-to-the-backend","content":"To allow OpenAPI to talk to the backend API, you must add API permissions to the OpenAPI app registration. In the left menu, go to API Permissions and Add a permission.  Select the user_impersonation scope, and press Add a permission. Your view should now look something like this:  That's it! Next step is to configure the FastAPI application. "},{"title":"FastAPI configuration","type":0,"sectionRef":"#","url":"multi-tenant/fastapi_configuration","content":"","keywords":""},{"title":"Getting started","type":1,"pageTitle":"FastAPI configuration","url":"multi-tenant/fastapi_configuration#getting-started","content":"First, either create your .env file and fill out your variables or insert them directly in your settings later. .env APP_CLIENT_ID=OPENAPI_CLIENT_ID= Copy Create your main.py file: main.py from fastapi import FastAPIimport uvicorn app = FastAPI() @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', host='localhost', port=8000, reload=True) Copy Run your application and ensure that everything works on http://localhost:8000/docs info You need to run the application on the configured port in Azure AD for the next steps to work! "},{"title":"Add your settings","type":1,"pageTitle":"FastAPI configuration","url":"multi-tenant/fastapi_configuration#add-your-settings","content":"First, add your settings to the application. We'll need these later. The way I've set it up will look for a .env-file to populate your settings, but you can also just set a default value directly. main.py from typing import Union import uvicornfrom fastapi import FastAPIfrom pydantic import AnyHttpUrl, BaseSettings, Field class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI() @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', host='localhost', port=8000, reload=True) Copy "},{"title":"Configure CORS","type":1,"pageTitle":"FastAPI configuration","url":"multi-tenant/fastapi_configuration#configure-cors","content":"Now, let's configure our CORS. Without CORS your OpenAPI docs won't work as expected: main.py from typing import Union import uvicornfrom fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import AnyHttpUrl, BaseSettings, Field class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI() if settings.BACKEND_CORS_ORIGINS: app.add_middleware( CORSMiddleware, allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], allow_credentials=True, allow_methods=['*'], allow_headers=['*'], ) @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', host='localhost', port=8000, reload=True) Copy "},{"title":"Configure OpenAPI Documentation","type":1,"pageTitle":"FastAPI configuration","url":"multi-tenant/fastapi_configuration#configure-openapi-documentation","content":"In order for our OpenAPI documentation to work, we have to configure a few settings directly in the FastAPI application. main.py from typing import Union import uvicornfrom fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import AnyHttpUrl, BaseSettings, Field class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI( swagger_ui_oauth2_redirect_url='/oauth2-redirect', swagger_ui_init_oauth={ 'usePkceWithAuthorizationCodeGrant': True, 'clientId': settings.OPENAPI_CLIENT_ID, },) if settings.BACKEND_CORS_ORIGINS: app.add_middleware( CORSMiddleware, allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], allow_credentials=True, allow_methods=['*'], allow_headers=['*'], ) @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', host='localhost', port=8000, reload=True) Copy The swagger_ui_oauth2_redirect_url setting for redirect should be as configured in Azure AD. The swagger_ui_init_oauth are standard mapped OpenAPI properties. You can find documentation about them here We've used two flags: usePkceWithAuthorizationCodeGrant, which is the authentication flow.clientId is our application Client ID, which will autofill a field for the end users later. "},{"title":"Implementing FastAPI-Azure-Auth","type":1,"pageTitle":"FastAPI configuration","url":"multi-tenant/fastapi_configuration#implementing-fastapi-azure-auth","content":"Now, the fun part begins! 🚀 Import the MultiTenantAzureAuthorizationCodeBearer from fastapi_azure_auth and configure it: main.py from typing import Union import uvicornfrom fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import AnyHttpUrl, BaseSettings, Fieldfrom fastapi_azure_auth import MultiTenantAzureAuthorizationCodeBearer class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI( swagger_ui_oauth2_redirect_url='/oauth2-redirect', swagger_ui_init_oauth={ 'usePkceWithAuthorizationCodeGrant': True, 'clientId': settings.OPENAPI_CLIENT_ID, },) if settings.BACKEND_CORS_ORIGINS: app.add_middleware( CORSMiddleware, allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], allow_credentials=True, allow_methods=['*'], allow_headers=['*'], ) azure_scheme = MultiTenantAzureAuthorizationCodeBearer( app_client_id=settings.APP_CLIENT_ID, scopes={ f'api://{settings.APP_CLIENT_ID}/user_impersonation': 'user_impersonation', }, validate_iss=False) @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', host='localhost', port=8000, reload=True) Copy As you can see we've set validate_iss to False. This will make sure FastAPI-Azure-Auth don't check which issuer (known as iss) the token has. In other words, we do not care which tenant the user was authenticating through. If you only want to allow a few tenants to access your API (such as your customers), see Accept specific tenants only, "},{"title":"Add loading of OpenID Configuration on startup","type":1,"pageTitle":"FastAPI configuration","url":"multi-tenant/fastapi_configuration#add-loading-of-openid-configuration-on-startup","content":"By adding on_event('startup') we're able to load the OpenID configuration immediately, instead of doing it when the first user authenticates. This isn't required, but makes things a bit quicker. When 24 hours has passed, the configuration will be considered out of date, and update when a user does a request. You can usebackground tasks to refresh it before that happens if you'd like. main.py from typing import Union import uvicornfrom fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import AnyHttpUrl, BaseSettings, Fieldfrom fastapi_azure_auth import MultiTenantAzureAuthorizationCodeBearer class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI( swagger_ui_oauth2_redirect_url='/oauth2-redirect', swagger_ui_init_oauth={ 'usePkceWithAuthorizationCodeGrant': True, 'clientId': settings.OPENAPI_CLIENT_ID, },) if settings.BACKEND_CORS_ORIGINS: app.add_middleware( CORSMiddleware, allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], allow_credentials=True, allow_methods=['*'], allow_headers=['*'], ) azure_scheme = MultiTenantAzureAuthorizationCodeBearer( app_client_id=settings.APP_CLIENT_ID, scopes={ f'api://{settings.APP_CLIENT_ID}/user_impersonation': 'user_impersonation', }, validate_iss=False) @app.on_event('startup')async def load_config() -> None: \"\"\" Load OpenID config on startup. \"\"\" await azure_scheme.openid_config.load_config() @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', host='localhost', port=8000, reload=True) Copy "},{"title":"Adding authentication to our view","type":1,"pageTitle":"FastAPI configuration","url":"multi-tenant/fastapi_configuration#adding-authentication-to-our-view","content":"There's two ways of adding dependencies in FastAPI. You can use Depends() or Security(). Security() has an extra property called scopes. FastAPI-Azure-Auth support both, but if you use Security() you can also lock down your API views based on the scope. Let's do that: main.py from typing import Union import uvicornfrom fastapi import FastAPI, Securityfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import AnyHttpUrl, BaseSettings, Fieldfrom fastapi_azure_auth import MultiTenantAzureAuthorizationCodeBearer class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI( swagger_ui_oauth2_redirect_url='/oauth2-redirect', swagger_ui_init_oauth={ 'usePkceWithAuthorizationCodeGrant': True, 'clientId': settings.OPENAPI_CLIENT_ID, },) if settings.BACKEND_CORS_ORIGINS: app.add_middleware( CORSMiddleware, allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], allow_credentials=True, allow_methods=['*'], allow_headers=['*'], ) azure_scheme = MultiTenantAzureAuthorizationCodeBearer( app_client_id=settings.APP_CLIENT_ID, scopes={ f'api://{settings.APP_CLIENT_ID}/user_impersonation': 'user_impersonation', }, validate_iss=False) @app.on_event('startup')async def load_config() -> None: \"\"\" Load OpenID config on startup. \"\"\" await azure_scheme.openid_config.load_config() @app.get(\"/\", dependencies=[Security(azure_scheme)])async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', host='localhost', port=8000, reload=True) Copy "},{"title":"Testing it out","type":1,"pageTitle":"FastAPI configuration","url":"multi-tenant/fastapi_configuration#testing-it-out","content":"Head over to your OpenAPI documentation at http://localhost:8000/docs and check out your API documentation. You'll see a new button called Authorize. Before clicking it, try out your API to see that you're unauthorized.  Now, let's authenticate. Click the Authorize button. Check your scope, and leave Client secret blank. You do not need that with the PKCE flow.  Consent to the permissions requested:  info If you get a warning that your redirect URL is wrong, you're probably using 127.0.0.1 instead of localhost Try out your API again to see that it works! "},{"title":"Last thing..","type":1,"pageTitle":"FastAPI configuration","url":"multi-tenant/fastapi_configuration#last-thing","content":"As discussed earlier, there is a scope parameter to the Security() version of Depends(). If you'd want to lock down your API to only be accessible by those with certain scopes, you can simply pass it into the dependency. @app.get(\"/\", dependencies=[Security(azure_scheme, scopes=['wrong_scope'])]) Copy If you do this and try out your API again, you'll see that you're denied. You're now safe and secure! Good luck! 🔒🚀 If you like this project, please leave us a star ❤ ️️ Star "},{"title":"Guest Users","type":0,"sectionRef":"#","url":"single-tenant/guest_users","content":"Guest Users By default, guest users in your tenant will be able to access your APIs. You can block this in code by checking the users tid is equal to yours, or preferably by configuring Azure AD. If you're using Azure AD to limit guest user access, the user will be denied access on sign in, instead of getting a 403 when using the API. Go to all your Enterprise Applicationsand do the following steps. You can find your Enterprise Application either by searching on the Client ID in theEnterprise Applications menu, or by first navigating to your App registration and clicking the Managed application in local directory link: Under Properties, enable User assignment required? and Save. Then, go to Users and groups, and add user/group. Find users or a fitting group and assign it to the role Default Access. note Groups you select should have all users as direct members of the group. Nested groups does not work with Enterprise Applications.","keywords":""},{"title":"Locking down on roles","type":0,"sectionRef":"#","url":"single-tenant/locking_down_on_roles","content":"Locking down on roles You can lock down on roles by creating your own wrapper dependency: dependencies.py from fastapi import Dependsfrom fastapi_azure_auth.auth import InvalidAuthfrom fastapi_azure_auth.user import User async def validate_is_admin_user(user: User = Depends(azure_scheme)) -> None: \"\"\" Validate that a user is in the `AdminUser` role in order to access the API. Raises a 401 authentication error if not. \"\"\" if 'AdminUser' not in user.roles: raise InvalidAuth('User is not an AdminUser') Copy and then use this dependency over azure_scheme.","keywords":""},{"title":"FastAPI configuration","type":0,"sectionRef":"#","url":"single-tenant/fastapi_configuration","content":"","keywords":""},{"title":"Getting started","type":1,"pageTitle":"FastAPI configuration","url":"single-tenant/fastapi_configuration#getting-started","content":"First, either create your .env file and fill out your variables or insert them directly in your settings later. .env APP_CLIENT_ID=TENANT_ID=OPENAPI_CLIENT_ID= Copy Create your main.py file: main.py from fastapi import FastAPIimport uvicorn app = FastAPI() @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', reload=True) Copy Run your application and ensure that everything works on http://localhost:8000/docs info You need to run the application on the configured port in Azure AD for the next steps to work! "},{"title":"Add your settings","type":1,"pageTitle":"FastAPI configuration","url":"single-tenant/fastapi_configuration#add-your-settings","content":"First, add your settings to the application. We'll need these later. The way I've set it up will look for a .env-file to populate your settings, but you can also just set a default value directly. main.py from typing import Union import uvicornfrom fastapi import FastAPIfrom pydantic import AnyHttpUrl, BaseSettings, Field class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') TENANT_ID: str = Field(default='', env='TENANT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI() @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', reload=True) Copy "},{"title":"Configure CORS","type":1,"pageTitle":"FastAPI configuration","url":"single-tenant/fastapi_configuration#configure-cors","content":"Now, let's configure our CORS. Without CORS your OpenAPI docs won't work as expected: main.py from typing import Union import uvicornfrom fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import AnyHttpUrl, BaseSettings, Field class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') TENANT_ID: str = Field(default='', env='TENANT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI() if settings.BACKEND_CORS_ORIGINS: app.add_middleware( CORSMiddleware, allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], allow_credentials=True, allow_methods=['*'], allow_headers=['*'], ) @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', reload=True) Copy "},{"title":"Configure OpenAPI Documentation","type":1,"pageTitle":"FastAPI configuration","url":"single-tenant/fastapi_configuration#configure-openapi-documentation","content":"In order for our OpenAPI documentation to work, we have to configure a few settings directly in the FastAPI application. main.py from typing import Union import uvicornfrom fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import AnyHttpUrl, BaseSettings, Field class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') TENANT_ID: str = Field(default='', env='TENANT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI( swagger_ui_oauth2_redirect_url='/oauth2-redirect', swagger_ui_init_oauth={ 'usePkceWithAuthorizationCodeGrant': True, 'clientId': settings.OPENAPI_CLIENT_ID, },) if settings.BACKEND_CORS_ORIGINS: app.add_middleware( CORSMiddleware, allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], allow_credentials=True, allow_methods=['*'], allow_headers=['*'], ) @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', reload=True) Copy The swagger_ui_oauth2_redirect_url setting for redirect should be as configured in Azure AD. The swagger_ui_init_oauth are standard mapped OpenAPI properties. You can find documentation about them here We've used two flags: usePkceWithAuthorizationCodeGrant, which is the authentication flow.clientId is our application Client ID, which will autofill a field for the end users later. "},{"title":"Implementing FastAPI-Azure-Auth","type":1,"pageTitle":"FastAPI configuration","url":"single-tenant/fastapi_configuration#implementing-fastapi-azure-auth","content":"Now, the fun part begins! 🚀 Import the SingleTenantAzureAuthorizationCodeBearer from fastapi_azure_auth and configure it: main.py from typing import Union import uvicornfrom fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import AnyHttpUrl, BaseSettings, Fieldfrom fastapi_azure_auth import SingleTenantAzureAuthorizationCodeBearer class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') TENANT_ID: str = Field(default='', env='TENANT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI( swagger_ui_oauth2_redirect_url='/oauth2-redirect', swagger_ui_init_oauth={ 'usePkceWithAuthorizationCodeGrant': True, 'clientId': settings.OPENAPI_CLIENT_ID, },) if settings.BACKEND_CORS_ORIGINS: app.add_middleware( CORSMiddleware, allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], allow_credentials=True, allow_methods=['*'], allow_headers=['*'], ) azure_scheme = SingleTenantAzureAuthorizationCodeBearer( app_client_id=settings.APP_CLIENT_ID, tenant_id=settings.TENANT_ID, scopes={ f'api://{settings.APP_CLIENT_ID}/user_impersonation': 'user_impersonation', }) @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', reload=True) Copy We pass the app_client_id= to be our Backend application ID, our tenant_id to be our Tenant ID, and then lastly our scopes. We'll get back to the scopes later. "},{"title":"Add loading of OpenID Configuration on startup","type":1,"pageTitle":"FastAPI configuration","url":"single-tenant/fastapi_configuration#add-loading-of-openid-configuration-on-startup","content":"By adding on_event('startup') we're able to load the OpenID configuration immediately, instead of doing it when the first user authenticates. This isn't required, but makes things a bit quicker. When 24 hours has passed, the configuration will be considered out of date, and update when a user does a request. You can usebackground tasks to refresh it before that happens if you'd like. main.py from typing import Union import uvicornfrom fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import AnyHttpUrl, BaseSettings, Fieldfrom fastapi_azure_auth import SingleTenantAzureAuthorizationCodeBearer class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') TENANT_ID: str = Field(default='', env='TENANT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI( swagger_ui_oauth2_redirect_url='/oauth2-redirect', swagger_ui_init_oauth={ 'usePkceWithAuthorizationCodeGrant': True, 'clientId': settings.OPENAPI_CLIENT_ID, },) if settings.BACKEND_CORS_ORIGINS: app.add_middleware( CORSMiddleware, allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], allow_credentials=True, allow_methods=['*'], allow_headers=['*'], ) azure_scheme = SingleTenantAzureAuthorizationCodeBearer( app_client_id=settings.APP_CLIENT_ID, tenant_id=settings.TENANT_ID, scopes={ f'api://{settings.APP_CLIENT_ID}/user_impersonation': 'user_impersonation', }) @app.on_event('startup')async def load_config() -> None: \"\"\" Load OpenID config on startup. \"\"\" await azure_scheme.openid_config.load_config() @app.get(\"/\")async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', reload=True) Copy "},{"title":"Adding authentication to our view","type":1,"pageTitle":"FastAPI configuration","url":"single-tenant/fastapi_configuration#adding-authentication-to-our-view","content":"There's two ways of adding dependencies in FastAPI. You can use Depends() or Security(). Security() has an extra property called scopes. FastAPI-Azure-Auth support both, but if you use Security() you can also lock down your API views based on the scope. Let's do that: main.py from typing import Union import uvicornfrom fastapi import FastAPI, Securityfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import AnyHttpUrl, BaseSettings, Fieldfrom fastapi_azure_auth import SingleTenantAzureAuthorizationCodeBearer class Settings(BaseSettings): SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY') BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000'] OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID') APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID') TENANT_ID: str = Field(default='', env='TENANT_ID') class Config: env_file = '.env' env_file_encoding = 'utf-8' case_sensitive = True settings = Settings() app = FastAPI( swagger_ui_oauth2_redirect_url='/oauth2-redirect', swagger_ui_init_oauth={ 'usePkceWithAuthorizationCodeGrant': True, 'clientId': settings.OPENAPI_CLIENT_ID, },) if settings.BACKEND_CORS_ORIGINS: app.add_middleware( CORSMiddleware, allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS], allow_credentials=True, allow_methods=['*'], allow_headers=['*'], ) azure_scheme = SingleTenantAzureAuthorizationCodeBearer( app_client_id=settings.APP_CLIENT_ID, tenant_id=settings.TENANT_ID, scopes={ f'api://{settings.APP_CLIENT_ID}/user_impersonation': 'user_impersonation', }) @app.on_event('startup')async def load_config() -> None: \"\"\" Load OpenID config on startup. \"\"\" await azure_scheme.openid_config.load_config() @app.get(\"/\", dependencies=[Security(azure_scheme)])async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run('main:app', reload=True) Copy "},{"title":"Testing it out","type":1,"pageTitle":"FastAPI configuration","url":"single-tenant/fastapi_configuration#testing-it-out","content":"Head over to your OpenAPI documentation at http://localhost:8000/docs and check out your API documentation. You'll see a new button called Authorize. Before clicking it, try out your API to see that you're unauthorized.  Now, let's authenticate. Click the Authorize button. Check your scope, and leave Client secret blank. You do not need that with the PKCE flow.  Consent to the permissions requested:  info If you get a warning that your redirect URL is wrong, you're probably using 127.0.0.1 instead of localhost Try out your API again to see that it works! "},{"title":"Last thing..","type":1,"pageTitle":"FastAPI configuration","url":"single-tenant/fastapi_configuration#last-thing","content":"As discussed earlier, there is a scope parameter to the Security() version of Depends(). If you'd want to lock down your API to only be accessible by those with certain scopes, you can simply pass it into the dependency. @app.get(\"/\", dependencies=[Security(azure_scheme, scopes=['wrong_scope'])]) Copy If you do this and try out your API again, you'll see that you're denied. You're now safe and secure! Good luck! 🔒🚀 If you like this project, please leave us a star ❤ ️️ Star "}]